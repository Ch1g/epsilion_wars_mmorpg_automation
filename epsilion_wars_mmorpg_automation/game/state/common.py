"""Check messages by patterns."""


from telethon import events

from epsilion_wars_mmorpg_automation.game.buttons import MAP, get_buttons_flat
from epsilion_wars_mmorpg_automation.game.parsers import get_city_buttons, strip_message


def is_equip_broken_message(event: events.NewMessage.Event) -> bool:
    """Equip broken message."""
    message = strip_message(event.message.message)
    return '—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞' in message and '—Å–Ω—è—Ç–∞ –∏–∑-–∑–∞ –ø–æ–ª–æ–º–∫–∏' in message


def is_hp_updated_message(event: events.NewMessage.Event) -> bool:
    """HP updated message."""
    message = strip_message(event.message.message)
    patterns = {
        '–≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        '–≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        '–µ–¥. –∑–¥–æ—Ä–æ–≤—å—è. —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ:',  # after success use heal pot
    }
    for pattern in patterns:
        if pattern in message:
            return True
    return False


def is_captcha_message(event: events.NewMessage.Event) -> bool:
    """Captcha shot."""
    return '—Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –∫–∞–ø—á—É' in strip_message(event.message.message)


def is_character_equip_select(event: events.NewMessage.Event) -> bool:
    """Character equip state."""
    message = strip_message(event.message.message)
    found_buttons = get_buttons_flat(event)
    if not found_buttons:
        return False

    return '–Ω–∞–¥–µ—Ç–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞:' in message and '–û—Ä—É–∂–∏–µ' in found_buttons[0].text


def is_character_equip_gun_select(event: events.NewMessage.Event) -> bool:
    """Character equip state."""
    message = strip_message(event.message.message)
    found_buttons = get_buttons_flat(event)
    if not found_buttons:
        return False

    if is_character_equip_select(event):
        return False

    last_button = found_buttons[-1]
    first_button = found_buttons[0]

    return '–Ω–∞–¥–µ—Ç–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞:' in message and '–ù–∞–∑–∞–¥' in last_button.text and 'üî™' in first_button.text


def is_character_info(event: events.NewMessage.Event) -> bool:
    """Character information state."""
    message = strip_message(event.message.message)
    return 'üí∞ –∑–æ–ª–æ—Ç–æ:' in message and 'üß¨ –æ—á–∫–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:' in message


def is_map_open_state(event: events.NewMessage.Event) -> bool:
    """Map open state."""
    message = strip_message(event.message.message)
    city_buttons = get_city_buttons(get_buttons_flat(event))
    if not city_buttons:
        return False
    return '–ª–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã:' in message


def is_town(event: events.NewMessage.Event) -> bool:
    """Is town state."""
    message = strip_message(event.message.message)
    found_buttons = get_buttons_flat(event)
    if not found_buttons:
        return False

    first_button = found_buttons[0]
    return '–≥–µ—Ä–æ–µ–≤ –≤ –≥–æ—Ä–æ–¥–µ:' in message and 'üèõ' in message and MAP in first_button.text


def is_npc_selector(event: events.NewMessage.Event) -> bool:
    """NPC selector opened state."""
    message = strip_message(event.message.message)
    found_buttons = get_buttons_flat(event)
    if not found_buttons:
        return False
    return '–∫ –∫–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏ –≤ –≥–æ—Å—Ç–∏?' in message
