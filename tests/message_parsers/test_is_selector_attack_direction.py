from unittest.mock import Mock

import pytest

from epsilion_wars_mmorpg_automation.message_parsers.checks import is_selector_attack_direction


@pytest.mark.parametrize('payload', [
    '–•–æ–¥ 6\n',
    '–ö—É–¥–∞ –±—É–¥–µ—à—å –±–∏—Ç—å?',
    '–ö—É–¥–∞ –±–∏—Ç—å?',
])
def test_is_selector_attack_direction_happy_path(payload: str):
    button_first = Mock()
    button_first.text = '–í –≥–æ–ª–æ–≤—É'
    button_last = Mock()
    button_last.text = '–°–±–µ–∂–∞—Ç—å'
    event_mock = Mock()
    event_mock.message.buttons = [[button_first, 2], [3, 4], [5], [button_last]]
    event_mock.message.message = payload

    result = is_selector_attack_direction(event_mock)

    assert result is True


def test_is_selector_attack_direction_buttons_not_found():
    event_mock = Mock()
    event_mock.message.buttons = []

    result = is_selector_attack_direction(event_mock)

    assert result is False


def test_is_selector_attack_direction_invalid_buttons():
    button_first = Mock()
    button_first.text = '–í –≥–æ–ª–æ–≤—É'
    button_last = Mock()
    button_last.text = '–î—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç'
    event_mock = Mock()
    event_mock.message.buttons = [[button_first, 2], [3, 4], [5], [button_last]]
    event_mock.message.message = '–•–æ–¥ 10'

    result = is_selector_attack_direction(event_mock)

    assert result is False


def test_is_selector_attack_direction_invalid_original_message():
    button_first = Mock()
    button_first.text = '–í –≥–æ–ª–æ–≤—É'
    button_last = Mock()
    button_last.text = '–°–±–µ–∂–∞—Ç—å'
    event_mock = Mock()
    event_mock.message.buttons = [[button_first, 2], [3, 4], [5], [button_last]]
    event_mock.message.message = 'üìç –¢—ã –ø–æ–±–µ–¥–∏–ª —Å–≤–æ–µ–≥–æ –≤—Ä–∞–≥–∞ -  üë®üèΩ‚Äçüé§ –ú–∞—Ä–æ–¥–µ—Ä üî∏10 üíî'

    result = is_selector_attack_direction(event_mock)

    assert result is False


def test_is_selector_attack_direction_skip_already_ended_turn_message():
    button_first = Mock()
    button_first.text = '–í –≥–æ–ª–æ–≤—É'
    button_last = Mock()
    button_last.text = '–°–±–µ–∂–∞—Ç—å'
    event_mock = Mock()
    event_mock.message.buttons = [[button_first, 2], [3, 4], [5], [button_last]]
    event_mock.message.message = '–•–æ–¥ 10\n ü¶Ö –ì—Ä–∏—Ñ üî∏9 ‚ù§Ô∏è(0/500) –±—å–µ—Ç –≤ –Ω–æ–≥–∏ –∏ –Ω–∞–Ω–æ—Å–∏—Ç 47'

    result = is_selector_attack_direction(event_mock)

    assert result is False
